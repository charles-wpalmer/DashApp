version: "2"

services:

  app:
    build:
      context: .
      dockerfile: ./docker/app/Dockerfile
    container_name: app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
       - ./:/var/www
    networks:
      - app-network

  #Nginx Service
  webserver:
    image: nginx:alpine
    container_name: webserver
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    volumes:
      - ./:/var/www
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/

  grafana:
    image: grafana/grafana:5.1.3
    # first install kairosdb datasource plugin, then run grafana
    entrypoint: /bin/sh
    command: ["-c", "grafana-cli plugins install grafana-kairosdb-datasource && /run.sh"]
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "1"
    restart: always
    ports:
      - "3000:3000"
    networks:
      - app-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secret

  kairosdb:
    image: elastisys/kairosdb:1.2.1
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "1"
    restart: always
    ports:
      - "8080:8080"
    networks:
      - app-network
    environment:      
      - CASSANDRA_HOSTS=cassandra
      - CASSANDRA_PORT=9042

  cassandra:
    image: cassandra:3.11
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "1"
    restart: always
    ports:
      - "9042:9042"
    volumes:
      - ${PWD}/cassandra-data:/var/lib/cassandra
    networks:
      - app-network
    environment:
      - CASSANDRA_CLUSTER_NAME=test-cluster


# set up a network local to the host to which we'll attach
# the containers. this means that the containers will be
# on the same network and will be able to communicate and
# lookup each other in DNS.
networks:
  app-network:
    driver: bridge